<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="nlog" type="NLog.Config.ConfigSectionHandler, NLog" />
    <section name="PrintSchedulerServiceSettings" type="Seagull.Services.PrintScheduler.Server.Data.ConfigServiceSettings, Seagull.Services.PrintScheduler.Server"/>
  </configSections>
  <appSettings>
    <add key="ServiceSettings.DefaultPort" value="5150" />
    <add key="ServiceSettings.DefaultInstanceName" value="Service" />
    <add key="ServiceSettings.DefaultServerName" value="localhost" />
  </appSettings>
  <system.serviceModel>
    <bindings>
      <netTcpBinding>
        <binding name="NetTcpBindingConfig" 
                 closeTimeout="00:01:00" 
                 openTimeout="00:01:00" 
                 receiveTimeout="00:10:00" 
                 sendTimeout="00:01:00" 
                 transactionFlow="false" 
                 transferMode="Buffered" 
                 transactionProtocol="OleTransactions" 
                 hostNameComparisonMode="StrongWildcard" 
                 listenBacklog="10" 
                 portSharingEnabled="true"
                 maxBufferPoolSize="6524288" 
                 maxBufferSize="2147483647" 
                 maxConnections="10" 
                 maxReceivedMessageSize="2147483647">
                <readerQuotas maxDepth="32"
                        maxStringContentLength="2147483647"
                        maxArrayLength="16384"
                        maxBytesPerRead="4096"
                        maxNameTableCharCount="16384" />
                <reliableSession ordered="true" 
                                 inactivityTimeout="00:10:00" 
                                 enabled="false" />
                <security mode="Transport">
                  <transport clientCredentialType="Windows" 
                             protectionLevel="EncryptAndSign" />
                  <message clientCredentialType="Windows" />
                </security>
        </binding>
      </netTcpBinding>
    </bindings>
    <services>
      <!--Print Scheduler Service-->
      <service name="Seagull.Services.PrintScheduler.Server.PrintSchedulerService">
        <endpoint address="net.tcp://localhost:${PrintSchedulerPort}/PrintScheduler/${InstanceName}" binding="netTcpBinding" bindingConfiguration="NetTcpBindingConfig" contract="Seagull.Services.PrintScheduler.Contracts.IPrintSchedulerService" />
      </service>
      <!--Print Scheduler Performance Service-->
      <service name="Seagull.Services.Hosts.PrintScheduler.PrintSchedulerPerformanceService">
        <endpoint address="net.tcp://localhost:${PrintSchedulerPort}/PrintScheduler/${InstanceName}/Performance" binding="netTcpBinding" bindingConfiguration="NetTcpBindingConfig" contract="Seagull.Services.Performance.Contracts.IPerformanceService" />
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior name="">
          <serviceMetadata httpGetEnabled="false" />
          <serviceDebug includeExceptionDetailInFaults="true" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <extensions>
      <behaviorExtensions>
        <add name="errorHandler" type="Seagull.Framework.Services.ServiceErrorHandlerElement, Seagull.Framework" />
      </behaviorExtensions>
    </extensions>
  </system.serviceModel>
  <!-- Uncomment to get low level WCF diagnostic logs -->
  <!--<system.diagnostics>
      <sources>
         <source name="System.ServiceModel"
                 switchValue="Information, ActivityTracing"
                 propagateActivity="true">
            <listeners>
               <add name="traceListener"
                   type="System.Diagnostics.XmlWriterTraceListener"
                   initializeData= "c:\temp\TracesServer.srvlog" />
            </listeners>
         </source>
      </sources>
   </system.diagnostics>-->
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="EntityFramework" publicKeyToken="b77a5c561934e089" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.4.0.0" newVersion="4.4.0.0" />
      </dependentAssembly>
    </assemblyBinding>
    <generatePublisherEvidence enabled="false" />
  </runtime>
  <!-- .NET Framework to use -->
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
  </startup>
  <!-- Log Configuration -->
  <!--internalLogFile="c:\Nlog.txt" internalLogLevel="Trace"-->
  <nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <targets>
      <!--Configure File Log Targets-->
      <target name="All" xsi:type="AsyncWrapper">
        <target name="Logfile" xsi:type="File"
           fileName="${specialfolder:folder=CommonApplicationData}\Seagull\Services\Logging\PrintScheduler.${InstanceName}.txt"
           archiveFileName="${specialfolder:folder=CommonApplicationData}\Seagull\Services\Logging\Archive\PrintScheduler.${InstanceName}.{#}.txt"
           archiveEvery="Day"
           archiveNumbering="Rolling"
           maxArchiveFiles="7"
         >
          <layout xsi:type="CsvLayout" delimiter="Pipe" withHeader="true" quoting="Nothing">
            <column name="Time" layout="${date:format=yyyy.MM.dd.HHmmss}" />
            <column name="EngineNumber" layout="${event-context:item=EngineNumber}"/>
            <column name="TaskID" layout="${event-context:item=TaskID}"/>
            <column name="TaskName" layout="${event-context:item=TaskName}"/>
            <column name="Document" layout="${event-context:item=Document}"/>
            <column name="Printer" layout="${event-context:item=Printer}"/>
            <column name="Level" layout="${level:upperCase=true}"/>
            <column name="Message" layout="${replace:inner=${message}:searchFor=\\r\\n|\\n:replaceWith=«CR»«LF»:regex=true}" />
          </layout>

        </target>
      </target>
      <!--Configure Colored Console Targets-->
      <target name="Console" xsi:type="ColoredConsole" useDefaultRowHighlightingRules="false" layout="${pad:padding=7:inner=${level}}: ${message}${when:when=length('${event-context:item=TaskID}') != 0:inner=, Task ID${literal:text=\:} '${event-context:item=TaskID}'}${when:when=length('${event-context:item=Printer}') != 0:inner=, Printer${literal:text=\:} '${event-context:item=Printer}'}${when:when=length('${event-context:item=Document}') != 0:inner=, Document${literal:text=\:} '${event-context:item=Document}'}">
        <highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkGray" />
        <highlight-row condition="level == LogLevel.Trace" foregroundColor="Gray" />
        <highlight-row condition="level == LogLevel.Info" foregroundColor="White" />
        <highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
        <highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
        <highlight-row condition="level == LogLevel.Fatal" foregroundColor="Red" backgroundColor="White" />
      </target>
    </targets>
    <!--Configure logger rules.-->
    <rules>
      <logger name="*" minlevel="Info" writeTo="All" />
      <logger name="*" minlevel="Info" writeTo="Console" />
    </rules>
  </nlog>
  
  <!-- Service Settings -->
   <PrintSchedulerServiceSettings>

       <!-- Scheduler settings -->
          <!-- UseLegacyScheduler - Whether the Print Scheduler should use the old Round Robin job scheduler which was used in Commander. Does not support
               guaranteed print order. -->
      <Scheduler UseLegacyScheduler="false" />

      <!-- Cache Document Settings-->
        <!-- The Cache Document settings specify how the caching of BarTender documents is handled within each instance of BarTender that is running
             under the service.-->
        <!-- OpenDocumentLimit - The maximum number of documents that BarTender will keep open at one time. A value of "0" disables document caching.-->
        <!-- OpenDocumentIdleTime - The amount of time (in seconds) that a cache document is allowed to stay open before it is automatically closed by 
             BarTender. A value of "0" means that the document will never be closed unless the OpenDocumentLimit has been reached.-->
        <!-- OpenDocumentRefreshTime - The amount of time (in seconds) before BarTender checks to see if an open document has been modified. A Value 
             of "-1" means that BarTender will refresh the document as soon as it detects a modification. A value of "0" disables the refresh option.-->
      <Cache OpenDocumentLimit="5" 
             OpenDocumentIdleTime="0" 
             OpenDocumentRefreshTime="-1"/>
      
      <!-- Recovery Settings -->
        <!-- The Recovery settings specify what should happen if the BarTender process becomes unresponsive or if print jobs fail.-->
        <!-- TerminateAndRestartUnresponsivePrintEngine - If set to "true", unresponsive print engines will be automatically stopped and restarted. 
             If set to "false", BarTender will do nothing if a print engine becomes unresponsive.-->
        <!-- TimeBeforeRestartMilliseconds - The time in milliseconds that a print engine must be unresponsive before BarTender stops the engine and 
             restarts it. If TerminateAndRestartUnresponsivePrintEngine is set to false, this time value is ignored.-->
     <Recovery TerminateAndRestartUnresponsivePrintEngine="true" 
               TimeBeforeRestartMilliseconds="300000"/>

     <!-- PrintEngine Settings -->
        <!-- The following options can be set for the print engines:-->
        <!-- NumberOfPrintEngines - The maximum number of print engines that will be started by the service. This setting is ignored if 
             DynamicEngineScaling is set to "true".-->
        <!-- RestartEngineMethod - Specifies when a print engine is restarted. This option is not related to the Recovery option of 
             TerminateAndRestartUnresponsivePrintEngines. Options for RestartEngineMethod include the following: 
               EveryCommand - Restarts the print engine after completing each job. 
               EveryHour - Restarts the print engine every hour.
               EveryMinute - Restarts the print engine every minute.
               EveryWeek - Restarts the print engine once a week.
               OnlyOnFailure - Will restart the print engine only if it becomes unresponsive or an unexpected error occurs.-->
        <!-- StartupCommand - A custom command line option to pass to the BarTender process running within the print engine.-->
        <!-- DesktopHeap - The amount of desktop heap memory in kilobytes allocated to each currently running BarTender process.-->
        <!-- Recoverable - If set to "true", queue jobs will be restored after the service has been restarted. If set to "false", the queue jobs will not
             be restored.-->
        <!-- RecoverableQueueName - The name of the message queue (MSMQ) to be used with the Recoverable tasks.-->
        <!-- DynamicEngineScaling - When set to "true", print engines are started and stopped depending on the load of the system; otherwise, all print 
             engines are started when the Print Scheduler service starts.-->
        <!-- StartOnDemand - When set to "true", print engines are started when needed; otherwise, all print engines are started when the Print Scheduler 
             service starts.-->
        <!-- MaxDynamicEngines - The maximum number of dynamic engines to run when using DynamicEngineScalling is being used. If not specified, the default 
             value is based on the number of CPU's on the machine times 2. Valid only if DynamicEngineScaling is set to "true".-->
        <!-- IdleShutdownTimeout - The amount of time (in minutes) that must pass before an idle dynamic engines is shut down. Valid only if DynamicEngineScaling 
             is set to "true".-->
      <PrintEngine NumberOfPrintEngines="3" 
                   RestartEngineMethod="EveryHour" 
                   StartupCommand="" 
                   DesktopHeap="2048" 
                   Recoverable="false" 
                   RecoverableQueueName="" 
                   DynamicEngineScaling="true" 
                   StartOnDemand="true"
                   IdleShutdownTimeout="60" />
      
     <!-- Console Settings -->
        <!-- The Console setting is available when running the service in a console or with the /Console command line option. (Debug options)-->
        <!-- EngineVisibility - Specifies the degree to which the BarTender user interface is visible. Options for EngineVisibility include the following: 
              None - Do not show BarTender (Default).
              All - All BarTender windows, including dialogs, will be visible.
              InteractiveDialogs - Only BarTender's interactive dialogs (for example, data prompts) will be visible. 
              StartingLabelDialogOnly - Only BarTender's starting label dialog will be visible.-->
      <Console EngineVisibility="None" />
   
   </PrintSchedulerServiceSettings>
</configuration>
